<?php

namespace Proxies\__CG__\Shapecode\Bundle\CronBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CronJob extends \Shapecode\Bundle\CronBundle\Entity\CronJob implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'command', 'description', 'number', 'period', 'lastUse', 'nextRun', 'results', 'enable', 'id', 'createdAt', 'updatedAt'];
        }

        return ['__isInitialized__', 'command', 'description', 'number', 'period', 'lastUse', 'nextRun', 'results', 'enable', 'id', 'createdAt', 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CronJob $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setCommand($command)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommand', [$command]);

        return parent::setCommand($command);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommand()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommand', []);

        return parent::getCommand();
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function getPeriod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPeriod', []);

        return parent::getPeriod();
    }

    /**
     * {@inheritDoc}
     */
    public function getInterval()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInterval', []);

        return parent::getInterval();
    }

    /**
     * {@inheritDoc}
     */
    public function setPeriod($period)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPeriod', [$period]);

        return parent::setPeriod($period);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastUse()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastUse', []);

        return parent::getLastUse();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastUse($lastUse)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastUse', [$lastUse]);

        return parent::setLastUse($lastUse);
    }

    /**
     * {@inheritDoc}
     */
    public function setNextRun($nextRun)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNextRun', [$nextRun]);

        return parent::setNextRun($nextRun);
    }

    /**
     * {@inheritDoc}
     */
    public function getNextRun()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNextRun', []);

        return parent::getNextRun();
    }

    /**
     * {@inheritDoc}
     */
    public function getResults()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getResults', []);

        return parent::getResults();
    }

    /**
     * {@inheritDoc}
     */
    public function hasResult(\Shapecode\Bundle\CronBundle\Entity\CronJobResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasResult', [$result]);

        return parent::hasResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function addResult(\Shapecode\Bundle\CronBundle\Entity\CronJobResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addResult', [$result]);

        return parent::addResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function removeResult(\Shapecode\Bundle\CronBundle\Entity\CronJobResult $result)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeResult', [$result]);

        return parent::removeResult($result);
    }

    /**
     * {@inheritDoc}
     */
    public function setEnable($enable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnable', [$enable]);

        return parent::setEnable($enable);
    }

    /**
     * {@inheritDoc}
     */
    public function isEnable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEnable', []);

        return parent::isEnable();
    }

    /**
     * {@inheritDoc}
     */
    public function calculateNextRun()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'calculateNextRun', []);

        return parent::calculateNextRun();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAtAndUpdatedAtValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAtAndUpdatedAtValue', []);

        return parent::setCreatedAtAndUpdatedAtValue();
    }

}
